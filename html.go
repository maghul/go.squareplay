// Code generated by go-bindata.
// sources:
// html/default.css
// html/doc.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlDefaultCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xcd\x41\x0a\xc2\x30\x10\x85\xe1\xfd\x9c\x62\xc0\x75\xa1\x55\x11\x69\x2e\xe0\x35\x26\xc9\xa4\x06\xc7\x4c\x89\xad\x58\xc5\xbb\x0b\x36\xb8\x52\x74\xe1\xfa\xf1\xfe\x0f\xac\xfa\x09\x6f\x80\x88\x68\xc9\x1d\xba\xac\x63\xf2\x95\x53\xd1\xdc\xe2\xc2\xd7\xbc\x0e\x6c\x9e\x73\xd0\x34\x54\x81\x8e\x51\xa6\x16\x77\x2c\x67\x1e\xa2\x23\x03\x77\x80\x7d\x53\x12\xe5\xa7\x99\x52\xc7\x99\xbd\xf9\x10\x26\x89\x8e\xad\x8c\x5f\xd2\xaf\xed\x14\xaf\xdc\xe2\x6a\xdb\x5f\x66\x6f\xf9\xce\xfb\x33\x56\x17\xac\x2f\xd6\x8f\xbf\x66\x33\xff\x1e\x01\x00\x00\xff\xff\x9f\xb0\x6e\x3e\x5a\x01\x00\x00")

func htmlDefaultCssBytes() ([]byte, error) {
	return bindataRead(
		_htmlDefaultCss,
		"html/default.css",
	)
}

func htmlDefaultCss() (*asset, error) {
	bytes, err := htmlDefaultCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/default.css", size: 346, mode: os.FileMode(420), modTime: time.Unix(1477443166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlDocHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x1a\x5d\x73\xdb\x36\xf2\xb9\xfc\x15\x7b\x7c\xe8\x43\xeb\x52\xb2\xa2\x36\xae\x2a\xeb\xc6\xe7\x74\xda\xdc\xe5\xc3\x13\xbb\xd3\xb9\x1b\xcf\x74\x20\x72\x29\x22\x06\x01\x06\x58\x4a\x51\x12\xff\xf7\x9b\x05\x48\x7d\xbb\x89\x12\xe6\xc5\x09\x81\xfd\xfe\x00\x76\x17\x1a\xff\xe3\xc9\xcb\xcb\x9b\xff\x5e\xfd\x0a\x05\x95\x6a\x12\x8d\xdb\x7f\x50\x64\x93\x68\x4c\x92\x14\x4e\xae\xdf\xd4\xc2\xe2\x95\x12\x4b\x70\x68\xe7\x68\x21\x33\x69\x5d\xa2\x26\x41\xd2\xe8\x71\x2f\x80\x45\x63\x25\xf5\x1d\xd0\xb2\xc2\xf3\x98\xf0\x2d\xf5\x52\xe7\x62\x28\x31\x93\xe2\x3c\x76\xa9\x45\xd4\x31\x58\x54\xe7\xb1\xa3\xa5\x42\x57\x20\x52\x0c\x85\xc5\xfc\x3c\xee\x31\xe3\x5e\x86\xb9\xa8\x15\x25\x8c\x38\x89\xc6\xbd\x46\x8c\xa9\xc9\x96\x2c\xd4\x69\x23\x4a\xf5\xb0\x28\xc5\x29\x03\x0e\x26\x7f\xbc\x7a\x76\x0d\xb5\xc3\x0c\xa6\x4b\xa0\x02\x61\xad\x04\xda\x06\x77\xdc\x2b\x06\xac\xa4\x98\x7a\xe9\xc9\xf2\x9f\x6c\x32\xae\x2c\x4e\x0a\xa2\x6a\xd4\xeb\x7d\xab\xe8\x97\x00\xfc\xed\x8c\x7e\xe9\x8d\x7b\xbc\x37\xee\x51\x16\x40\xaf\x0b\xb3\x80\xb4\xb6\x16\x35\x41\xe5\x69\x3b\x10\x3a\x03\x67\x4a\x04\xa9\x73\x03\x62\x6a\x6a\x62\x09\xca\x06\xad\x47\x76\xf2\x29\xbc\x82\x41\x4c\x9a\xf0\x7f\x76\x19\xdf\x14\xd2\xed\x79\xe1\x18\xea\xda\x90\xcc\x65\xea\x51\x5d\xf2\xda\x31\x81\x6d\x16\xbf\x21\xc1\x16\x14\xe4\xd6\x94\xde\x96\x81\xce\x09\xb8\x3a\x2d\x40\x38\x38\x92\x77\x6a\x34\x59\xa3\x7a\x8e\x84\xa5\x3d\x93\xf2\x22\x08\xd8\x09\x3a\x99\x62\x02\x5e\xeb\x29\xa6\xa6\x44\x07\x02\x34\x2e\xda\x3d\xc8\x8d\x85\x0b\x69\x3d\x7c\x86\xbc\xe4\x80\x0c\xa4\x46\x6b\x4c\x09\xc8\x34\xd8\xae\x30\xb5\xca\x22\x80\x29\xab\xa1\x89\xc5\x17\x70\xf5\xf2\xfa\x06\x2c\xbe\xa9\xd1\x11\x2c\x24\x15\xf0\xef\xeb\x97\x2f\x00\x75\x6a\x32\xcc\xa0\x12\x56\x94\x48\x68\x5d\x12\x01\x78\xcd\x22\x00\x80\xf7\x10\xbf\x10\x25\xc6\x23\x88\x9f\x2f\x21\xc4\x56\x7c\x02\xf1\xd3\x8c\x97\xe2\x7e\x7f\xd4\x1f\x8e\x06\xfd\xd1\xe9\x60\xf4\xf3\xe9\xe8\x6c\x10\xc7\x70\xcf\x04\x7a\x0d\x85\x9b\x02\x41\x0b\x8e\x14\x16\xa2\xb2\xe8\x5a\x6f\x86\x65\x56\xaa\xaa\xa7\x4a\x3a\xa9\x67\xde\xf2\x21\xc6\x7c\x88\xf1\xe7\xd3\x8c\x51\x7d\x98\x4b\x0d\xae\x9e\x3a\xd6\x41\x53\xab\x8b\x0f\xc6\x08\xb6\xfd\x98\x44\x9f\xe9\x2f\x65\x66\x33\xb4\x3d\x2b\x4c\x95\x25\xa2\xce\xa4\xf9\x27\x43\x9a\x3c\xff\xc0\xa1\xfe\x21\xc3\x69\x3d\x63\x8c\x3d\x9f\x22\x81\x87\x87\x40\xa2\x0b\xfe\x99\x48\xab\x23\xd8\x3f\xb9\xb8\xbc\x6a\xb8\x7b\xb3\x5a\x2c\x0d\x21\x34\xa4\xc1\xe4\x20\x9f\xf8\xb0\xe9\x42\xb4\x52\x1c\x25\xda\xf3\x8b\x56\xb4\x13\xe8\xc4\x33\x54\x7c\x22\xfb\x67\x66\x06\x0c\x6e\xac\x7c\x17\x82\xa3\x0b\xd7\x68\xa4\x23\xf8\x2b\xb3\x00\x85\x73\x54\xa0\x91\x16\xc6\xde\x81\x48\x49\xce\x25\x2d\xbb\x90\x85\xff\x1e\x21\xcc\xab\x8b\x97\x57\x90\x9a\xb2\x14\x3a\xeb\xc4\x16\x96\x8e\x62\x7f\x73\xd5\xad\xf6\xe4\x8e\x63\x7f\xbd\xe6\xdf\x01\xfb\x70\x1a\xa5\x68\x8f\x90\x61\x85\xd3\xa9\x21\xe6\x46\xd5\x25\x1e\x21\x46\x40\x80\x42\xe8\x4c\x49\x3d\xeb\x42\x86\x77\x68\x4d\x6a\x74\x7e\x84\x14\xff\x43\x6b\x2e\x8d\xce\x7b\xff\x32\xfa\xb5\xa9\xbb\xb2\xc9\x77\x47\x9c\x4e\x21\x35\xf9\xc8\x14\x4a\x35\xc7\xd4\x17\x66\x46\xeb\x62\xb2\x22\x0d\x3e\xc9\x85\x72\xf8\x81\x6c\x8d\x87\xc4\xf8\x55\x73\x85\x06\x5b\x68\x2c\xc9\x09\x10\x5f\xe9\x0b\xa9\x14\xa4\x16\x05\x21\x08\x70\xc8\xb7\x35\x79\x80\x5c\x32\x5a\x85\xa9\xbf\xfc\x94\x5a\x7a\x3d\xd6\x11\x26\x35\xf4\xa8\xac\x7a\xdf\x25\x5b\xb4\x13\x65\xbe\xd0\xe1\x21\x7a\x8e\xd4\x6f\x03\xe9\x0b\xb4\xdb\x0c\x5c\xdc\xd0\x70\x83\xfa\x67\xe8\xc7\x9f\xa9\x92\xa8\xc9\x7f\x96\x48\x22\x13\x24\x1e\x2c\x1c\xb9\x38\x69\x81\xf8\x72\xe5\xef\xb6\x4e\x76\xe6\xe8\x7c\xda\x61\x9f\x9a\x39\xda\xe4\x75\x35\xdb\x2f\x8b\xf9\x4a\x9f\xa3\xe5\x1a\xb2\x73\xb6\xbe\x84\x49\xaa\xb4\x7c\x48\xe3\x50\xe3\x08\x07\x57\x97\xcf\xbb\x60\xb5\x10\xf3\xaf\xcf\xaa\x0d\xdd\x10\x20\xe7\x62\xea\x8c\xaa\x09\x0f\x9d\x05\xcc\xb8\x89\xaf\xda\x97\xa4\x2d\x30\x94\x26\x6b\xeb\x73\x87\x3a\x6b\xa1\xb6\xfb\x07\x5f\x58\x7b\x1a\x42\xd5\xe8\xa0\x9f\x24\xa7\xfd\xfe\x46\xd4\x46\x69\x21\xf4\x6c\xdd\xb3\x35\x25\x59\xe2\x0b\xe5\x86\xa4\x43\x6a\x98\x6f\xd4\xc3\x6d\x19\xd7\xdc\xdc\x21\x69\xa6\x08\x16\x73\x85\x29\x61\x06\x46\x47\x1b\x14\x5b\x62\x53\x61\x1b\xa9\x3d\x86\x36\xc4\x27\x6c\xed\x93\x29\xc8\xb2\xa9\xb3\xd1\x9b\x52\x81\xd1\x6a\xe9\x89\xfe\xf6\xc7\xd3\xe4\xd8\x1e\xe8\xef\x9d\x60\x51\x09\x92\xf3\x8f\x39\xa1\x55\x9b\x0c\xb4\x18\x9b\x9e\xf0\x3a\xb9\x06\xe5\x4e\x9b\x69\xab\x41\x63\xed\xa9\xb0\xbb\x3a\x91\x09\x39\x83\x9a\xd0\x26\xf0\x34\xa4\x10\x03\x72\xbf\x69\xc5\x8c\xbd\x93\x99\x85\x06\x63\xfd\x96\x32\x0b\x5c\xb9\x6f\x5a\x13\x19\xcd\xa0\xdc\xcb\x70\x57\x72\x30\x0e\x4c\x0e\xf1\x0f\x83\x78\xe5\x25\xee\x7a\x12\xb8\x96\xa5\x54\xc2\xaa\xe5\x36\x74\xc4\xd0\xdf\xef\x40\xc3\xa2\xc0\x4d\x55\x36\xa5\xab\xab\x56\x36\x2b\xa4\x5b\xbb\xda\xcb\x16\xad\x65\x6b\x8c\x14\xfa\xa7\xbc\x56\x4d\xbb\xe8\x0d\x2a\xca\x4a\xc9\x5c\xa2\x85\x45\x21\xd3\x02\x52\xa1\xbd\xbb\xd7\x66\xde\x0a\x58\x97\x74\xea\x7d\xde\x0d\xb9\xf1\xd0\xa5\xbc\x19\x94\xf9\x6e\xaa\x1c\x17\xcd\xa1\x59\x66\xf3\xac\x5a\x49\x32\x20\x75\xc6\x0e\xc0\x03\x9c\xae\xdf\xd4\x88\xef\x70\x6a\xde\x76\xa3\xf4\x14\x67\x52\xe7\xf9\xae\x9a\x7e\x19\x72\xe1\x88\x0f\x88\x85\xb0\x59\x87\xec\x2c\x2e\x0e\xf3\xb3\xb8\x90\xba\x23\x4e\x65\x4d\x48\x66\x36\x53\x7b\x69\x1c\x56\x81\x01\xc0\x91\xa0\xfa\xd8\x82\xea\x01\x8e\x1a\xdf\x92\x24\xdc\xbb\x9f\xfc\xbc\x8c\x37\x81\x77\xb9\x28\xe0\x15\x25\x1d\x75\xc3\xb7\xb2\x38\x7f\x90\xaf\xdf\x34\xb5\xfb\x5a\xbc\x45\xed\xf6\x0c\xec\x17\x3d\xa3\xa9\x48\xef\x3a\x62\xa4\xc4\xf2\x20\xb3\xc6\x9b\x53\xa4\x05\x62\x50\xcf\x0f\x68\x1a\xe0\xae\x78\xef\xb2\xf5\xd3\xb3\x8e\x75\x74\x64\xaa\x7d\x3e\xa6\xfa\x0a\xa6\xb4\xe8\xea\x72\xdf\x71\xde\x78\x39\xa1\xdd\x4a\x7d\xf0\x13\x9b\xee\x52\xd3\x15\x75\x9e\x2b\xfc\x8b\x6b\x42\xb7\xa7\x70\xd8\xfc\x68\x9c\x82\x9f\x62\x9f\xc7\xa9\x51\xc6\x8e\x40\xc9\x59\x41\xa9\xb1\x42\xc5\x9f\x73\xea\xf3\xa5\xba\x17\x59\xb5\xd5\x4d\xa5\xd7\x9c\xc1\x0c\x95\xc0\x13\xe3\x0f\x77\x8e\x71\xdf\x23\xb4\x65\x4f\x26\x2d\xa6\xa4\x96\x20\xb5\x23\x14\x59\x14\x20\x36\xea\x85\x30\xd8\xf0\x25\xd7\xba\x7c\x7a\xf0\xf6\xea\x56\xc3\x7a\x2f\xb4\xf6\xf5\xab\xab\xaf\xaa\x1d\xff\x6d\xa6\xfd\xc5\x60\xf2\x62\xb3\xce\x08\x8f\x01\x5b\x4b\x20\x6c\x53\x6e\x18\x0d\x02\x2a\xb4\x4e\x3a\xe2\xef\xb4\xa8\xf5\x1d\x66\xf0\xfb\xcd\xcd\x15\x58\x74\x95\xd1\x0e\x03\x54\x63\x98\x71\xb0\xca\x64\x6f\xd0\x1e\x35\xa3\x59\x5f\xd4\x2e\x1b\x16\xa1\xf9\xcc\x42\x85\x2c\x56\x0b\xa0\xeb\x72\x1a\xfa\x54\xd6\x27\xf6\x6c\xff\xc2\xb7\x84\xda\x49\xa3\x63\x28\x50\x64\x61\x1f\x05\x97\x29\xbc\x9f\x44\xe3\x62\x38\xb9\xf4\x5e\xd8\x2a\xa5\xa0\x44\xe7\x44\xa8\x56\x8a\xe1\x24\x1a\xd7\xca\xbf\xd9\x4c\xb2\x52\x54\x09\x47\xba\xd4\xb3\x70\x8c\x2b\x39\x81\x0b\xe0\xe6\x0e\x0a\xe1\x0a\x50\x92\xd0\x0a\xe5\xeb\x23\x21\xb5\x9c\xad\x9b\xbb\xd5\xfb\xc6\xaa\xd1\xe2\x1e\xf3\x6e\x55\x5d\x45\x19\x86\x21\xba\x1f\x73\x7a\x14\x6f\xd2\xd5\x63\xc2\xaa\x72\xb9\xd0\x80\x6f\xb9\xf2\x6a\x4a\x0d\xe9\x46\x51\x98\xb5\xbf\x3f\x30\x4a\x1f\xbd\xf7\x23\xf8\x78\x57\xf8\x78\x04\xef\xa3\x6f\xc2\xf2\xda\x63\x32\x8b\x47\xf0\xe3\xf0\x51\xff\xec\xa7\xc1\xa3\xc7\x3f\x0f\x07\xfd\xfe\xf0\xf4\xa7\xb3\x47\x27\x9e\x48\x20\x24\x44\x95\xf0\x81\x20\xd4\xb4\x66\x32\xf1\x8d\x29\x6f\xe1\x19\x16\x16\x2d\xbc\xc2\xb9\x74\x92\x30\x8b\x0f\xa2\x58\x92\x8e\x18\x27\x80\x9f\xc0\x8d\x29\x0f\x42\xa6\xa6\xac\x8c\x43\xeb\x1f\x08\x0e\x01\xcc\x50\x5b\xff\xa2\xf0\x7b\x5d\x1a\xbb\x05\xc2\x2a\xb1\x8a\xba\x79\x73\x78\xca\xd9\x95\xd5\x29\x3b\xf7\x20\x2d\xef\x89\x10\x43\xf1\x08\x4e\x1f\x04\x49\x4d\xad\x59\xfa\xd3\xe1\x21\x90\x4c\xba\xf4\xef\x89\xb0\x57\xef\xa4\x66\x1b\xf7\xb7\xf6\xd3\x2a\x69\x5e\xc5\x48\x10\xcb\x3c\x38\x28\x83\xf4\xfa\x0c\xfa\x8f\x1f\x0f\xcf\xfc\xfe\x7d\x74\x7f\x1f\x35\xcf\x24\x1c\xa1\x21\xc3\xdb\xb8\x6c\xf3\x3d\x94\xb4\xfb\x81\x74\xb3\x6e\x31\x39\xbd\x50\x52\x81\x96\xbb\xcd\x55\xbb\x29\xb4\x6f\x5d\x6b\xc2\xa8\x2d\x6e\x6d\xe8\x32\xf8\xa0\xf1\xcd\x49\x78\x24\xd8\xaa\xf6\xa1\xad\xf6\x23\x4f\x63\x77\x3b\x69\xa3\x15\x0e\x86\x2b\xc4\x01\x8c\x3d\xc7\x0c\x36\x34\xfc\x54\xb4\xef\x3f\x0b\xed\xd1\xe3\xe4\x74\x30\x3c\x3b\x3b\x85\x6d\xa3\x3a\x53\xdb\x34\x18\xf5\x02\xc2\x07\x67\x7b\xfb\x66\x16\x1a\x81\xd0\x47\x99\x6a\xf5\x08\xd7\xb0\x8d\xdf\xc3\xed\x3e\xe3\x5b\xe6\x7c\x1b\x07\x62\xb7\xf1\x08\x6e\xe3\xe7\xcb\x1f\xe4\x55\x61\x34\x26\xca\xa4\x42\xdd\xb2\x06\x71\x2b\x86\x97\xa3\xb2\x66\xc6\x2d\x59\x23\x89\x7f\x79\x3b\x78\xea\xe8\x19\x44\x21\xeb\x9b\xa3\xe6\x7c\xcc\xa1\x33\xf9\xc5\xaf\x29\xd4\x33\x2a\x56\x4b\xf7\x7e\xf1\xcf\x02\x2d\x02\x2f\x71\x77\x23\x35\x94\x52\x29\xe9\x30\x35\x3a\x73\x8d\x2e\xc7\x8d\x9c\xa2\x6f\x1e\xb4\x78\xab\x08\x1f\x41\x10\x37\x32\x72\xce\x9c\xf6\x1f\x3d\x3e\x81\x38\x48\xc8\x0b\xfd\x1f\x7f\x1a\x0e\xce\xce\xe0\x7e\xc7\x23\xe1\x41\x34\x38\x84\x2c\x8a\xd2\x3b\xc4\x2f\x63\xd6\x9a\xde\xbf\x3b\x1e\x90\x20\xf6\x70\xf1\x0e\x45\x2e\xe8\xf6\x09\x9a\xaa\xfa\x24\x82\xa6\xda\xa6\xd7\xd4\xb4\xbb\x04\xfd\xf2\xc7\xe9\x79\xb0\x35\x41\x76\x10\x13\x6d\x27\x76\x9e\xee\x65\x3b\xbe\x63\xba\x75\x95\x09\x0e\x44\xce\x4a\xee\xc1\xfd\x48\x87\xac\xc4\x39\x37\xfa\x7e\x0a\xf4\xd9\x53\xc3\x8f\x09\xdb\x4a\xb5\x61\x80\x9e\xbf\x31\x8b\xe1\xe4\x3a\xfc\xf6\xe0\x93\x6e\xd7\x20\xd0\x75\xd3\xe6\x29\x39\x79\x85\x5c\xf7\xb8\xcd\x3b\xd3\xfb\x98\x56\x2d\x76\x40\x49\xe0\x4f\x3f\xfb\x0d\x20\x6a\x19\x06\x4e\x7e\xbc\x16\xbf\xfc\x4f\xcc\xe5\x86\xd4\x92\x64\xc8\x10\x4e\xd9\x2d\x07\x6c\xf2\xe5\xc3\x83\x51\x76\x55\xe9\x35\xbf\xac\xe8\x85\x9f\x7d\xfc\x3f\x00\x00\xff\xff\x76\xa3\xf6\x0b\x0e\x22\x00\x00")

func htmlDocHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlDocHtml,
		"html/doc.html",
	)
}

func htmlDocHtml() (*asset, error) {
	bytes, err := htmlDocHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/doc.html", size: 8718, mode: os.FileMode(420), modTime: time.Unix(1477568959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/default.css": htmlDefaultCss,
	"html/doc.html": htmlDocHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"default.css": &bintree{htmlDefaultCss, map[string]*bintree{}},
		"doc.html": &bintree{htmlDocHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

